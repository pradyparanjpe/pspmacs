#+title: pspmacs-python
#+PROPERTY: header-args :tangle pspmacs-python.el :mkdirp t :results no :eval no

* Header Copyright
#+begin_src emacs-lisp
;;; prog.el --- python ide -*- lexical-binding: t; -*-

;; Copyright (C) 2023  Pradyumna Swanand Paranjape

;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
;; Keywords: help, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:
#+end_src

* Base package
#+begin_src emacs-lisp
  (use-package python-mode
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :general
    (pspmacs/local-leader-keys
      :keymaps 'python-mode-map
      "'" '((lambda () (interactive)
              (pspmacs/inferior-interpreter 'run-python))
            :wk "python"))
    (general-def 'normal
      python-mode-map
      "gz" nil
      "C-j" nil
      "K" '(lambda ()
           (interactive)
           (lsp-describe-thing-at-point)
           (switch-to-buffer-other-window "*lsp-help*")))
    :custom
    (with-eval-after-load 'lsp
      (customize-set-variable
       lsp-file-watch-ignored-directories
       (append
        lsp-file-watch-ignored-directories
        '(
          ;; python directories
          "[/\\\\]docs\\'"
          "[/\\\\]build\\'"
          "[/\\\\]tests\\'"
          "[/\\\\]\\.?venv\\'"
          "[/\\\\]\\.?\\(\\([a-zA-Z0-9]\\)*_?\\)*\\.egg-info\\'"
          "[/\\\\]\\.?\\(\\([a-zA-Z0-9]\\)*_?\\)*cache\\(__\\)?\\'"))))
    (python-indent-offset 0)
    ;; ipython-specific code
    :config
    (sp-local-pair 'python-mode "\"\"\"" "\"\"\"")
    (sp-local-pair 'python-mode "__" "__")

    :hook
    ((python-mode . pspmacs/prefer-interpreter-ipython)
     (python-mode . pspmacs/prettify-python)
     (python-mode . pspmacs/pyfaces)))
#+end_src

* Emacs Ipython Notebook
#+begin_src emacs-lisp
  (use-package ein
    :demand t
    :config
    (add-to-list 'org-babel-load-languages '(ein . t)))
#+end_src

* Automatic virtual environment
#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :defer t
    :hook ((python-mode . pyvenv-auto-run)))
#+end_src
* Automatic imports
- Requirements:
  - importmagic
  - epc
#+begin_src emacs-lisp
  (use-package importmagic
    :defer t
    :general
    (pspmacs/local-leader-keys
      :states 'normal
      :keymaps 'importmagic-mode-map
      "rf" '(importmagic-fix-symbol-at-point :wk "fix at point")
      "ri" '(importmagic-fix-imports :wk "fix imports")
      "rI" '(importmagic-fix-symbol :wk "arbitrary import"))
    :hook
    (python-mode . importmagic-mode))

#+end_src

* Auto - format before saving
1. sort
2. yet another python formatter (yapf)
#+begin_src emacs-lisp
  (use-package isortify
    :defer t
    :hook (python-mode . isortify-mode))

  (use-package yapfify
    :defer t
    :hook (python-mode . yapf-mode))
#+end_src

* Pytests
- Disabled currently
#+begin_src emacs-lisp :tangle no
  (use-package python-pytest
    :general
    (pspmacs/local-leader-keys
      :keymaps 'python-mode-map
      "t" '(:ignore t :wk "test")
      "t d" '(python-pytest-dispatch :wk "dispatch")
      "t f" '(python-pytest-file :wk "file")
      "t t" '(python-pytest-function :wk "function"))
    :init
    (setq python-pytest-arguments '("--color" "--failed-first"))
    :config
    (advice-add 'python-pytest--run :around #'pspmacs/pytest-use-venv))
#+end_src
** TODO Coverage
- A /good programmer/ always writes tests.
- A /better programmer/ writes tests before writing the runtime code.
- I want to be a better- or at least a good programmer in the future.
  #+begin_src emacs-lisp :tangle no :results none :export no
    (flycheck-define-checker python-pycoverage
      "A Python test coverage checker using the pycoverage tool.

    See `https://github.com/mattharrison/pycoverage.el'.

    Copied verbatim from
    `https://www.emacswiki.org/emacs/PythonProgrammingInEmacs'.
    and didn't even look at the code.

    This works after pytest has run by marking lines missing
    coverage (as reported by pytest) as flycheck issues.  If the code
    was updated after pytest was run then nothing is reported.
    "
      :command
      ("python" "-c"
       (eval
        (mapconcat 'identity
                   (list
                    "import sys"
                    (format "sys.path.insert(0, '%scov2emacs')" (file-name-directory (locate-library "pycoverage")))
                    "from cov2emacslib.__init__ import main"
                    "main(sys.argv[1:])")
                   ";"))
       "--compile-mode" "--python-file" source-original)
      :error-patterns ((warning line-start (file-name) ":" line ":" (message) line-end))
      :modes (python-mode))
  #+end_src

* language server protocol
1. Microsoft's pyright
2. flycheck flake8 for error checks
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :defer t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))
#+end_src

* Python yasnippets
#+begin_src emacs-lisp
  (use-package py-snippets
    :after '(yasnippet python-mode)
    :config
    (py-snippets-initialize))
#+end_src

* Inherit from private and local
 #+begin_src emacs-lisp
   (pspmacs/load-inherit)
   ;;; pspmacs-prog.el ends here
#+end_src

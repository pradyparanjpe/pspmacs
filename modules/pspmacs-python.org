#+title: pspmacs-python
#+PROPERTY: header-args :tangle pspmacs-python.el :mkdirp t :results no :eval no
#+auto_tangle: t

* Header Copyright
#+begin_src emacs-lisp
;;; python.el --- python ide -*- lexical-binding: t; -*-

;; Copyright Â© 2023  Pradyumna Swanand Paranjape

;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
;; Keywords: help, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:
#+end_src

* Base package
** Conventions
|------------+-------------------|
| Category   | Convention        |
|------------+-------------------|
| LSP Client | Eglot             |
| LSP Server | python-lsp-server |
| docstring  | [[https://google.github.io/styleguide/pyguide.html][google]]            |
|------------+-------------------|
#+begin_src emacs-lisp
  (use-package python-mode
    :after smartparens
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :general
    (pspmacs/local-leader-keys
      :keymaps 'python-mode-map
      "'" '((lambda () (interactive)
              (pspmacs/inferior-interpreter 'run-python))
            :wk "python"))
    (general-def 'normal
      python-mode-map
      "gz" nil
      "C-j" nil)
    :init
    ;; (with-eval-after-load 'eglot
      ;; (add-to-list 'eglot-server-programs
                   ;; '(python-mode . ("pyright-langserver" "--stdio"))))
    :custom
    (python-indent-offset 4)
    ;; Global python-lsp-server configuration
    (eglot-workspace-configuration
      `(:pylsp .
          (:plugins
           (:jedi_completion (:fuzzy t)
                             :jedi (:environment ,venv-directory)
                             :rope (:enabled t)
                             :pyflakes (:enabled t)
                             :mccabe (:enabled t)
                             :pycodestyle (:enabled t)
                             :pydocstyle (:enabled t :convention "google")
                             :yapf (:enabled t)
                             :flake8 (:enabled nil)))))
    :hook
    ((python-mode . pspmacs/prefer-interpreter-ipython)
     (python-mode . pspmacs/prettify-python)
     (python-mode . pspmacs/pyfaces)))
#+end_src

* pyright Eglot
[[https://robbmann.io/posts/emacs-eglot-pyrightconfig/][Robmann's blog]]
#+begin_src emacs-lisp :eval no :tangle no :export no
  (defun pyrightconfig-write (virtualenv)
    "Taken from https://robbmann.io/posts/emacs-eglot-pyrightconfig/"
    (interactive "DEnv: ")
    (let* (;; file-truename and tramp-file-local-name ensure that neither `~'
           ;; nor the Tramp prefix (e.g. "/ssh:my-host:") wind up in the final
           ;; absolute directory path.
           (venv-dir (tramp-file-local-name (file-truename virtualenv)))

           ;; Given something like /path/to/.venv/,
           ;; this strips off the trailing `/'.
           (venv-file-name (directory-file-name venv-dir))

           ;; Naming convention for venvPath matches the field
           ;; for pyrightconfig.json. `file-name-directory' gets us
           ;; the parent path (one above .venv).
           (venvPath (file-name-directory venv-file-name))

           ;; Grabs just the `.venv' off the end of the venv-file-name.
           (venv (file-name-base venv-file-name))

           ;; Eglot demands that `pyrightconfig.json'
           ;; is in the project root folder.
           (base-dir (vc-git-root default-directory))
           (out-file (expand-file-name "pyrightconfig.json" base-dir))

           ;; Finally, get a string with the JSON payload.
           (out-contents (json-encode `(:venvPath ,venvPath :venv ,venv))))

      ;; Emacs uses buffers for everything.  This creates a temp buffer,
      ;; inserts the JSON payload, then flushes that content to final
      ;; `pyrightconfig.json' location
      (with-temp-file out-file (insert out-contents))))
#+end_src

* Emacs IPython Notebook
#+begin_src emacs-lisp
  (use-package ein
    :demand t
    :config
    (add-to-list 'org-babel-load-languages '(ein . t)))
#+end_src

* Automatic virtual environment
#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :defer t
    :hook ((python-mode . pyvenv-auto-run)))
#+end_src
* Pip handle
- Python3 pip handle wrapper
  - Handle package(s) using pip in current virtual environment
** Lowest Level interaction handle
#+begin_src emacs-lisp
  (cl-defun pspmacs/pip (cmd packages &key (flags nil))
    "Wrapper around pip install working in current virtual environment.

  CMD is pip (sub-)command (install, uninstall, etc) to execute.
  FLAGS may be string or symbol list of flags passed to subcommand.
  PACKAGES are string or symbol list of flags passed to subcommand.
  We assume pip = pip3 *always* (python2 is already in antiquity)."
    (let*
        ((pip (or (executable-find "pip") (executable-find "pip3")))
         (cmd (if (symbolp cmd) (symbol-name cmd) cmd))
         (packages (mapcar (lambda (x)
                             (if (symbolp x) (symbol-name x) x))
                           packages))
         (flags (mapcar (lambda (x) (if (symbolp x) (symbol-name x) x)) flags))
         (sh-args (remq nil `(,cmd ,@flags ,@packages))))
      (switch-to-buffer-other-window "*pip*")
      (apply 'start-process "pip" "*pip*" pip sh-args)))
#+end_src

** Interactive handle
#+begin_src emacs-lisp
  (defun pspmacs/pip-interactive ()
    "Handle python pip interactively in current virtualenv

  ACTION: action to perform (install, uninstall)"
    (interactive)
    (let ((action (completing-read "Action: "
                                   '("install" "uninstall" "arbitrary"))))
      (cond ((member action '("uninstall" "install"))
             (let ((packages (split-string (read-string "Packages: ")))
                   (flags (split-string (read-string "Flags: "))))
               (pspmacs/pip action packages :flags flags)))
            (t (let ((cmd (read-string "sub-command: "))
                     (args (split-string (read-string "arguments and flags: "))))
                 (pspmacs/pip cmd args))))))
#+end_src

* Automatic imports
- Requirements:
  - importmagic
  - epc
#+begin_src emacs-lisp
  (use-package importmagic
    :defer t
    :general
    (pspmacs/local-leader-keys
      :states 'normal
      :keymaps 'importmagic-mode-map
      "rf" '(importmagic-fix-symbol-at-point :wk "fix at point")
      "ri" '(importmagic-fix-imports :wk "fix imports")
      "rI" '(importmagic-fix-symbol :wk "arbitrary import"))
    :hook
    (python-mode . importmagic-mode))
#+end_src

* Auto - format before saving
1. sort
2. yet another python formatter (yapf)
#+begin_src emacs-lisp
  (use-package isortify
    :defer t
    :hook (python-mode . isortify-mode))

  (use-package yapfify
    :defer t
    :hook (python-mode . yapf-mode))
#+end_src

* Pytests
- Disabled currently
#+begin_src emacs-lisp :tangle no
  (use-package python-pytest
    :general
    (pspmacs/local-leader-keys
      :keymaps 'python-mode-map
      "t" '(:ignore t :wk "test")
      "t d" '(python-pytest-dispatch :wk "dispatch")
      "t f" '(python-pytest-file :wk "file")
      "t t" '(python-pytest-function :wk "function"))
    :init
    (setq python-pytest-arguments '("--color" "--failed-first"))
    :config
    (advice-add 'python-pytest--run :around #'pspmacs/pytest-use-venv))
#+end_src

** TODO Coverage
- A /good programmer/ always writes tests.
- A /better programmer/ writes tests before writing the runtime code.
- I want to be a better- or at least a good programmer in the future.
  #+begin_src emacs-lisp :tangle no :results none :export no
    (flycheck-define-checker python-pycoverage
      "A Python test coverage checker using the pycoverage tool.

    See `https://github.com/mattharrison/pycoverage.el'.

    Copied verbatim from
    `https://www.emacswiki.org/emacs/PythonProgrammingInEmacs'.
    and didn't even look at the code.

    This works after pytest has run by marking lines missing
    coverage (as reported by pytest) as flycheck issues.  If the code
    was updated after pytest was run then nothing is reported.
    "
      :command
      ("python" "-c"
       (eval
        (mapconcat 'identity
                   (list
                    "import sys"
                    (format "sys.path.insert(0, '%scov2emacs')" (file-name-directory (locate-library "pycoverage")))
                    "from cov2emacslib.__init__ import main"
                    "main(sys.argv[1:])")
                   ";"))
       "--compile-mode" "--python-file" source-original)
      :error-patterns ((warning line-start (file-name) ":" line ":" (message) line-end))
      :modes (python-mode))
  #+end_src

* Python yasnippets
#+begin_src emacs-lisp :tangle no :results none :export no
  (use-package py-snippets
    :after '(yasnippet python-mode)
    :config
    (py-snippets-initialize))
#+end_src

* Documentation
#+begin_src emacs-lisp
  (use-package pydoc
    :general
    (pspmacs/leader-keys :keymap 'python-mode-map
      "d"  '(:ignore t :wk "describe")
      "d." '(pydoc-at-point :wk "this")
      "d$" '(pydoc-browse :wk "browse")
      "dd" '(pydoc :wk "prompt")))
#+end_src

* Inherit from private and local
 #+begin_src emacs-lisp

   (pspmacs/load-inherit)
   ;;; pspmacs-python.el ends here
#+end_src

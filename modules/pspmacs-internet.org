
#+title: pspmacs-internet
#+PROPERTY: header-args :tangle pspmacs-internet.el :mkdirp t :results no :eval no
#+auto_tangle: t

* Header Copyright
#+begin_src emacs-lisp
;;; internet.el --- internet ide -*- lexical-binding: t; -*-

;; Copyright Â© 2023  Pradyumna Swanand Paranjape

;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
;; Keywords: help, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:
#+end_src

* Internet browser
** EWW configuration
Reference: Borrowed and modified from [[https://github.com/karthink/.emacs.d/blob/master/lisp/setup-org.el][Karthink's Emacs configuration]].
#+begin_src emacs-lisp
  ;; (declare-function bookmark-make-record-default "bookmark" (&optional no-file no-context posn))
  ;; (declare-function bookmark-prop-get "bookmark" (bookmark prop))
  ;; (declare-function bookmark-default-handler "bookmark" (bmk))
  ;; (declare-function bookmark-get-bookmark-record "bookmark" (bmk))

  (use-package eww
    :general
    (pspmacs/leader-keys
      :states 'normal
      "ib" '(eww-switch-to-buffer :wk "buffers")
      "io" '(eww t :wk "open")
      "is" '(:ignore t :wk "search")
      "isw" '(eww-search-words :wk "words"))
    (pspmacs/leader-keys
      :states 'normal
      ;; FIXME :keymaps 'eww-mode-map
      "iu"  '(:ignore t :wk "url")
      "iuy" '(eww-copy-page-url :wk "copy"))

    :init
    (defun karthink/reader-center-images ()
      "Center images in document. Meant to be added to a post-render
   hook."
      (let* ((inhibit-read-only t)
             (pixel-buffer-width (shr-pixel-buffer-width))
             match)
        (save-excursion
          (goto-char (point-min))
          (while (setq match (text-property-search-forward
                              'display nil
                              (lambda (_ p) (eq (car-safe p) 'image))))
            (when-let ((size (car (image-size
                                   (prop-match-value match) 'pixels)))
                       ((> size 150))
                       (center-pixel (floor (- pixel-buffer-width size) 2))
                       (center-pos (floor center-pixel (frame-char-width))))
              (beginning-of-line)
              (delete-horizontal-space)
              (indent-to center-pos)
              (end-of-line))))))

    :custom
    (eww-auto-rename-buffer t)
    (eww-search-prefix "https://duckduckgo.com/html/?q=")
    (eww-bookmarks-directory xdg/emacs-cache-directory)
    (eww-browse-url-new-window-is-tab nil)
    (shr-width fill-column)
    (url-configuration-directory
     (file-name-as-directory
      (expand-file-name "url" xdg/emacs-cache-directory)))
    (url-cookie-file (expand-file-name "cookies" url-configuration-directory))

    :hook
    ((eww-after-render . (lambda () (setq line-spacing 0.1)))
     (eww-after-render . karthink/reader-center-images)))
#+end_src

* Mail
** Org mime
#+begin_src emacs-lisp
  (use-package org-mime
    :ensure t
    :commands (org-mime-confirm-when-no-multipart)
    :custom
    (org-mime-export-options '(:section-numbers nil
                                                :with-author nil
                                                :with-toc nil))
    (org-mime-library 'mml))
#+end_src

** Mu
- Depends on mu(4e), isync (mbsync) and gpg
- This requires configuration of =mbsync= to be placed in =${XDG_CONFIG_HOME:-{HOME}/.config/mu4e/mbsyncrc}=.
- Depending upon the number of mails, this may eat up a lot of storage space.

*** Local/Private configuration
- Configure remote and local mailbox using =~/.mbsyncrc=.
- Install mu4e (mu).
- Initiate mu
  #+begin_src bash :tangle no
    $ mu init --my-address <username>@<work-mailbox>.org --my-address <username>@<personal-mailbox>.com --maildir ~/.local/share/Mail
       #+end_src

- Add mu4e contexts in either of =pvt-emacs-dir= or =local-emacs-dir=.
  #+begin_src emacs-lisp :tangle no
    (customize-set-variable
      'mu4e-contexts
      (list
       (make-mu4e-context
        :name "Work"
        :enter-func (lambda () (mu4e-message "Entering Work mail"))
        :leave-func (lambda () (mu4e-message "Leaving Work mail"))
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/Work" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "<username>@<work-mailbox>.org")
                (user-full-name    . "<Firstname Surname>")
                (mu4e-drafts-folder  . "/Work/DRAFTS")
                (mu4e-refile-folder  . "/Work/ARCHIVE")
                (mu4e-sent-folder  . "/Work/SENT")
                (mu4e-trash-folder  . "/Work/TRASH")))
       (make-mu4e-context
        :name "Personal"
        :enter-func (lambda () (mu4e-message "Entering Personal mail"))
        :leave-func (lambda () (mu4e-message "Leaving Personla mail"))
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "<username>@<personal-mailbox>.com")
                (user-full-name    . "<Firstname>")
                (mu4e-drafts-folder  . "/Personal/DRAFTS")
                (mu4e-refile-folder  . "/Personal/ARCHIVE")
                (mu4e-sent-folder  . "/Personal/SENT")
                (mu4e-trash-folder  . "/Personal/TRASH")))))
#+end_src

#+begin_note
/Personal/ and /Work/ are configured mail directory sub-directories in mbsyncrc.
#+end_note

- Reference:
  - Videos Playlist: [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][System Crafters]]
  - Repository: [[https://github.com/daviwil/emacs-from-scratch][emacs-from-scratch]]

- Set path to =pspmacs/mu4e-load-path= in =local-emacs-dir/early/config.el=.
  #+begin_src emacs-lisp :tangle no
    (customize-set-variable 'pspmacs/mu4e-load-path "/usr/share/emacs/site-lisp/mu4e/")
    #+end_src

*** Mu4e global configuration
#+begin_src emacs-lisp
  (when pspmacs/mu4e-load-path
    (use-package mu4e
      :ensure nil
      :load-path pspmacs/mu4e-load-path
      :defer 20
      :after evil-collection
      :general
      (pspmacs/leader-keys
        "<"  '(:ignore t :wk "mail")
        "<<" '(mu4e :wk "main")
        "<u" '(mu4e-update-mail-and-index :wk "update")
        "<c" '(mu4e-compose-new :wk "compose"))

      (pspmacs/leader-keys
        :keymaps '(org-mode-map mu4e-compose-mode-map)
        ;; NEXT: add as send-mail hook
        "<h"  '(:ignore t :wk "htmlize")
        "<hh" '(org-mime-htmlize :wk "this"))

      (pspmacs/leader-keys
        :keymaps '(org-mode-map)
        "<h"  '(:ignore t :wk "htmlize")
        "<hb" '(org-mime-org-subtree-htmlize :wk "buffer")
        "<hs" '(org-mime-org-subtree-htmlize :wk "subtree"))

      :init
      (customize-set-variable 'message-send-mail-function 'smtpmail-send-it)
      (customize-set-variable 'smtpmail-servers-requiring-authorization
                              "smtp\\.gmail\\.com")
      :custom
      (mu4e-account-alist t)
      (mu4e-enable-notifications t)
      (mu4e-enable-mode-lineu4e-enable-mode-line t)
      (mu4e-compose-signature-auto-include t)
      (mu4e-compose-signature (format "%s\n%s" "--" user-full-name))
      (mu4e-compose-format-flowed t)
      (mu4e-get-mail-command (format
                              "mbsync -c %s -a"
                              (expand-file-name
                               "mu4e/mbsyncrc"
                               (or (getenv "XDG_CONFIG_HOME") "~/.config"))))
      (mu4e-maildir (expand-file-name
                     "Maildir" (or (getenv "XDG_DATA_HOME") "~/.local/share")))
      (mu4e-change-filenames-when-moving t)
      (mu4e-update-interval (* 1 60 60))
      (mu4e-view-show-images t)
      (mu4e-view-show-addresses t)
      :hook
      ((mu4e-compose-mode . display-fill-column-indicator-mode)
       (message-send . mml-secure-message-sign-pgpmime)
       (message-send . org-mime-confirm-when-no-multipart)
       (org-mime-html . (lambda ()
                          (org-mime-change-element-style
                           "pre"
                           (format
                            "color: %s; background-color: %s; padding: 0.5em;"
                            "#959a9f" "#000307")))))
      :config
      (mu4e t)
      (evil-collection-mu4e-setup)))
      #+end_src

** Mu4e-org
Integrate mu4e with org-mode
#+begin_src emacs-lisp
  (when pspmacs/mu4e-load-path
    (use-package mu4e-org
      :ensure nil
      :after (mu4e org)
      :init
      (require 'org-capture)
      ;; Ensure File exists
      (make-directory (file-name-directory pspmacs/org-mail-path) t)
      (unless (file-exists-p pspmacs/org-mail-path)
        (write-region "\n* Follow up\n\n* Read later" nil pspmacs/org-mail-path))
      (pspmacs/extend-list
       'org-capture-templates
       `(("m" "Mail")
         ("mf" "Follow up" entry (file+olp ,pspmacs/org-mail-path "Follow up")
          ,(string-join
            '("* About %a"
              "** With %:fromname"
              "** Created: %:date-timestamp-inactive"
              "")
            "\n"))
         ("mr" "Read later" entry (file+olp ,pspmacs/org-mail-path "Read Later")
          ,(string-join
            '("* About %a"
              "** From %:fromname"
              "** Created: %:date-timestamp-inactive"
              "")
           "\n"))))))
#+end_src

* native Emacs settings
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (mail-source-directory
     (expand-file-name
      "Maildir" (or (getenv "XDG_DATA_HOME")
                    (expand-file-name ".local/share" (getenv "HOME")))))
    (mail-default-directory (expand-file-name
      "Maildir/drafts" (or (getenv "XDG_DATA_HOME")
                           (expand-file-name ".local/share" (getenv "HOME")))))
    (message-auto-save-directory (expand-file-name
      "Maildir/drafts" (or (getenv "XDG_DATA_HOME")
                           (expand-file-name ".local/share" (getenv "HOME")))))
    (browse-url-generic-program (or (executable-find "qutebrowser")
                                    (executable-find "firefox")
                                    (executable-find "chromium-freeworld")
                                    (executable-find "google-chrome")))
    (browse-url-browser-function 'browse-url-generic))
#+end_src

* Inherit from private and local
 #+begin_src emacs-lisp
   (pspmacs/load-inherit)
   ;;; pspmacs-internet.el ends here
#+end_src

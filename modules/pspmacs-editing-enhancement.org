#+title: pspmacs-editing-enhancement
#+PROPERTY: header-args :tangle pspmacs-editing-enhancement.el :mkdirp t :results no :eval no
#+auto_tangle: t

* Header Copyright
#+begin_src emacs-lisp
;;; pspmacs-editing-enhancement.el --- writing aid -*- lexical-binding: t; -*-

;; Copyright © 2023  Pradyumna Swanand Paranjape

;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
;; Keywords: help, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:
#+end_src

* emacsmirror/rainbow-mode
- color codes (rgb[a], hex, names)
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (((prog-mode org-mode) . rainbow-mode)))
#+end_src

* Fanael/rainbow-delimiters
- rainbow-colored delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

* Whitespace
#+begin_src emacs-lisp
  (use-package whitespace
    ;; gratefully borrowed from
    ;; https://www.reddit.com/r/emacs/comments/2keh6u/show_tabs_and_trailing_whitespaces_only/
    :init
    (setq whitespace-display-mappings
          ;; all numbers are Unicode codepoint in decimal.
          ;; try (insert-char 182 ) to see it
          '(
            ;; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
            (space-mark 32 [183] [46])
            ;; 10 LINE FEED
            (newline-mark 10 [182 10])
            ;; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
            (tab-mark 9 [187 9] [9655 9] [92 9]))
          whitespace-style '(face tabs trailing tab-mark))
    :config
    (set-face-attribute 'whitespace-tab nil
                        :background "#f0f0f0"
                        :foreground "#00a8a8"
                        :weight 'bold)
    (set-face-attribute 'whitespace-trailing nil
                        :background "#ffffff"
                        :foreground "#183bc8"
                        :weight 'normal)
    :hook
    ((prog-mode org-mode) . whitespace-mode))

#+end_src

* purcell/whitespace-cleanup-mode
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :hook (prog-mode . whitespace-cleanup))
#+end_src

* domtronn/all-the-icons
- Additional font icons/emojis
#+begin_src emacs-lisp
  (use-package all-the-icons)

  ;; prettify dired with icons
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook
    (dired-mode . (lambda () (interactive)
                    (unless (file-remote-p default-directory)
                      (all-the-icons-dired-mode)))))
#+end_src

* magnars/multiple-cursors
Multi cursor edit mode
- TODO configure
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :after evil
    :general
    (pspmacs/leader-keys
      "s" '(:ignore t :wk "multiple-substitute")
      "se" '(:ignore t :state 'visual :wk "edit")
      :states 'visual
      "sef" '(mc/mark-all-like-this-in-defun :wk "function")
      "seb" '(mc/mark-all-like-this :wk "buffer"))
    (pspmacs/leader-keys
      :states 'normal
      "sef" '(mc/mark-all-symbols-like-this-in-defun :wk "function")
      "seb" '(mc/mark-all-symbols-like-this :wk "buffer")))
 #+end_src

* emacs/undo-tree
- Undo history cache
- set cache to xdg/emacs-cache-directory
#+begin_src emacs-lisp
  (use-package undo-tree
    :general
    (general-define-key
     :keymaps 'evil-normal-state-map
     "u" #'undo-tree-undo
     "C-r" #'undo-tree-redo)
    :init
    (global-undo-tree-mode)
    :config
    (mkdir (expand-file-name "undo-tree/" xdg/emacs-cache-directory) t)
    :custom
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist
     `((".*" . ,(expand-file-name "undo-tree/" xdg/emacs-cache-directory))))
    (undo-tree-visualizer-diff t)
    (undo-tree-visualizer-timestamps t))
#+end_src
* FAIL AndreaCrotti/yasnippet-snippets
This requires =yasnippet v0.8.0=, which is unavailable.
Yasnippet is already at 0.14.0.
#+begin_src emacs-lisp :tangle no :eval no
  (use-package yasnippet-snippets)
#+end_src

* joaotavora/yasnippets
Insert snippets of frequently used topics.
#+begin_src emacs-lisp
  (use-package yasnippet
    :general
    (pspmacs/leader-keys
      "y" '(:ignore t :wk "yas")
      "yn" '(yas-new-snippet :wk "new")
      "yi" '(yas-insert-snippet :wk "insert"))
    (yas-minor-mode-map
     :states 'insert
     "TAB" 'nil
     "C-TAB" 'yas-expand)
    :config
    (pspmacs/extend-list
     'yas-snippet-dirs
     (mapcar
      (lambda (x) (expand-file-name "snippets" x)) pspmacs/worktrees))
    (dolist (snippets-wt yas-snippet-dirs nil)
      (mkdir snippets-wt t))
    (yas-reload-all)
    :hook
    (((prog-mode org-mode) . yas-minor-mode)))
#+end_src

* FlySpell
Spell-check on-the-fly
#+begin_src emacs-lisp
  (general-add-hook 'org-mode-hook 'flyspell-mode)
  (pspmacs/leader-keys
    "S" '(:ignore t :wk "flyspell")
    "Sb" '(flyspell-buffer :wk "next")
    "Sn" '(evil-next-flyspell-error :wk "next")
    "Sp" '(evil-prev-flyspell-error :wk "previous")
    "Ss" '(flyspell-correct-word-before-point :wk "Menu"))
#+end_src
* native emacs-settings
- Display line numbers
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq-default display-line-numbers-type 'relative)
    (global-display-line-numbers-mode 1))
#+end_src

* fuco1/smartparens
- Auto-complete pairs
#+begin_src emacs-lisp
  (use-package smartparens
    :general
    (pspmacs/leader-keys
      "(" '(:ignore t :wk "smart-wrap")
      "( <backspace>" '(sp-unwrap-sexp :wk "wrap unwrap")
      "((" '(sp-wrap-round :wk "()")
      "()" '(sp-wrap-round :wk "()")
      "([" '(sp-wrap-square :wk "[]")
      "(]" '(sp-wrap-square :wk "[]")
      "({" '(sp-wrap-curly :wk "{}")
      "(}" '(sp-wrap-curly :wk "{}")
      "(<" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "<"))
             :wk "<>")
      "(>" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "<"))
             :wk "<>")
      "(\"" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "\""))
             :wk "\"\"")
      "('" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "'"))
             :wk "''")
      "(/" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "/"))
             :wk "//")
      "(_" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "_"))
             :wk "__")
      "(+" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "+"))
             :wk "++")
      "(=" '((lambda (&optional arg)
               (interactive "P")
               (sp-wrap-with-pair "="))
             :wk "=="))

    :custom
    (sp-show-pair-from-inside nil)
    (show-paren-mode t)
    (smartparens-global-mode t)
    :config
    (sp-local-pair 'python-mode "\"\"\"" "\"\"\"")
    (sp-local-pair 'python-mode "__" "__")
    (sp-with-modes 'emacs-lisp-mode-map
      ;; disable ', it's the quote character.
      (sp-local-pair "'" nil :actions nil)
      ;; also only use the pseudo-quote inside strings where it
      ;; serves as hyperlink.
      (sp-local-pair "`" "'" :when '(sp-in-string-p sp-in-comment-p))))
#+end_src

* zzkt/smog
Readability checks.
Dependencies: [[https://www.gnu.org/software/diction/][Gnu style and diction]]
#+begin_src emacs-lisp
  (use-package smog
    :init
    (defun pspmacs/readability (&optional buffer)
      (interactive)
      (progn
        (if buffer
            (smog-check-buffer)
          (smog-check))
        (switch-to-buffer-other-window "*Readability*")))
    :general
    (pspmacs/local-leader-keys
      :keymaps '(text-mode-map org-mode-map)
      :states 'normal
      "=r" '(:ignore t :wk "readibility")
      "=rr" '(pspmacs/readability :wk "check region")
      "=rb" '((lambda () (interactive) (pspmacs/readability t))
              :wk "check buffer")))
#+end_src

* ~manuel-uberti/flycheck-proselint
#+begin_src emacs-lisp
  (use-package flymake-proselint
    :hook
    (((markdown-mode text-mode org-mode) . flymake-proselint-setup)
     ((markdown-mode text-mode org-mode) . flymake-mode)))
#+end_src

* Inherit from private and local
#+begin_src emacs-lisp
  (pspmacs/load-inherit)
  ;;; pspmacs-editing-enhancement.el ends here
#+end_src

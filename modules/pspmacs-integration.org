#+title: pspmacs-integration
#+PROPERTY: header-args :tangle pspmacs-integration.el :mkdirp t :results no :eval no
#+auto_tangle: t

Integration

* Vterm
- libvterm libvterm for emacs
  #+begin_src emacs-lisp
    (use-package vterm
      :general
      (pspmacs/leader-keys
        "'" '((lambda () (interactive)
                (let ((term-window (split-window-below)))
                  (select-window term-window)
                  (vterm)))
              :wk "terminal"))
      :init
      (setq vterm-always-compile-module t
            vterm-ignore-blink-cursor t)
      :ensure t
      :config
      (general-add-hook
       'vterm-exit-functions
       '(lambda (_ _) (pspmacs/destroy-buffer-and-window))))
    #+end_src

* Clipboard
- Use wl-copy when =XDG_SESSION_TYPE= is "wayland".
#+begin_src emacs-lisp
  (setq wl-copy-process nil)
  (defun wl-copy (text)
    (setq wl-copy-process (make-process :name "wl-copy"
                    :buffer nil
                    :command '("wl-copy" "-f" "-n")
                    :connection-type 'pipe))
    (process-send-string wl-copy-process text)
    (process-send-eof wl-copy-process))
  (defun wl-paste ()
    (if (and wl-copy-process (process-live-p wl-copy-process))
    nil ; should return nil if we're the current paste owner
      (shell-command-to-string "wl-paste -n | tr -d \r")))

  (when (string-collate-equalp (getenv "XDG_SESSION_TYPE") "WAYLAND" nil t)
    (setq interprogram-cut-function 'wl-copy)
    (setq interprogram-paste-function 'wl-paste))

#+end_src

** Yank file name to clipboard
#+begin_src emacs-lisp
  (defun pspmacs/yank-file-name ()
    "Yank file-name to clipboard"
    (interactive)
    (kill-new buffer-file-name))
#+end_src

* Restart in same state
Primary to bind restart key
#+begin_src emacs-lisp
  (use-package restart-emacs
    :general
    (pspmacs/leader-keys
      "qr" '(restart-emacs :wk "and restart")))
#+end_src

* Helm search (ag)
- Attempted order
  1. ripgrep (~rg~)
  2. platinum searcher (~pt~)
  3. ack search (~ack~)
  4. silver-search (~ag~)
  5. fallback grep (~grep~)

#+begin_src emacs-lisp
    (use-package helm-ag
      :init
      (cond
       ((executable-find "rg")
    (custom-set-variables
     '(helm-ag-base-command "rg --no-heading")
     `(helm-ag-success-exit-status '(0 2))))
       ((executable "pt")
    (custom-set-variables
     '(helm-ag-base-command "pt -e --nocolor --nogroup")))
       ((executable "ack")
    (custom-set-variables
     '(helm-ag-base-command "ack --nocolor --nogroup"))))

      :general
      (pspmacs/leader-keys
    "/" '(lambda ()
           (interactive)
           (helm-do-ag (or projectile-project-root default-directory)))
    :kw "find in project"
    "*" '(lambda ()
           (interactive)
           (helm-do-ag (or projectile-project-root default-directory) nil
               (thing-at-point 'symbol)))
    :kw "find in project")

      :config
      (setq treemacs-no-png-images t treemacs-width 24)
      :bind ("C-c t" . treemacs))
#+end_src

* Systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

* Nginx mode
#+begin_src emacs-lisp
  (use-package nginx-mode
    :mode ("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src
* Inherit from private and local
 #+begin_src emacs-lisp
   (pspmacs/load-inherit)
   (provide 'pspmacs-integration)
   ;;; os.el ends here
#+end_src

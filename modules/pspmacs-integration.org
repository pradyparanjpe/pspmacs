#+title: pspmacs-integration
#+PROPERTY: header-args :tangle pspmacs-integration.el :mkdirp t :results no :eval no
#+auto_tangle: t

Integration
* Header Copyright
#+begin_src emacs-lisp
  ;;; pspmacs-integration.el --- User experience/interface -*- lexical-binding: t; -*-

  ;; Copyright Â© 2023  Pradyumna Swanand Paranjape

  ;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
  ;; Keywords: help, languages

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU Lesser General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU Lesser General Public License for more details.

  ;; You should have received a copy of the GNU Lesser General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;;; Code:
#+end_src

* Termimal Emulators
** libvterm
- libvterm libvterm for emacs
  - PRO: Native compiled from =C=.
  #+begin_src emacs-lisp
    (use-package vterm
      :general
      (pspmacs/leader-keys
        "'v" '((lambda () (interactive)
                 (pspmacs/inferior-interpreter 'vterm))
               :wk "vterm"))
      :custom
      (vterm-always-compile-module t)
      (vterm-ignore-blink-cursor t)
      :config
      (general-add-hook
       'vterm-exit-functions
       '(lambda (&rest _) (pspmacs/destroy-buffer-and-window))))
    #+end_src

** Eat
#+begin_src emacs-lisp
  (use-package eat
    :general
    (pspmacs/leader-keys
      "'e" '((lambda () (interactive)
               (pspmacs/inferior-interpreter 'eat))
             :wk "eat"))
    :config
    (general-add-hook
       'eat-exit-hook
       '(lambda (&rest _) (pspmacs/destroy-buffer-and-window))))
#+end_src

* Clipboard
- Use wl-copy when =XDG_SESSION_TYPE= is "wayland".
#+begin_src emacs-lisp
  (setq wl-copy-process nil)
  (when (string-collate-equalp (getenv "XDG_SESSION_TYPE") "WAYLAND" nil t)
    (setq interprogram-cut-function 'wl-copy)
    (setq interprogram-paste-function 'wl-paste))
#+end_src

* Search
- Attempted order
  1. ripgrep (~rg~)
  2. platinum searcher (~pt~)
  3. ack search (~ack~)
  4. silver-search (~ag~)
  5. fallback grep (~grep~)

** minad/consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :commands (consult-ripgrep)
    :general
    (pspmacs/leader-keys
      "bb" '(consult-buffer :wk "menu")
      "/" '(consult-ripgrep :wk "find in project")
      "*" '((lambda ()
              (interactive)
              (consult-ripgrep nil (thing-at-point 'symbol)))
            :wk "find this in project")
      "el" '(consult-flymake :wk "list")
      "fr" '(consult-recent-file :wk "recent"))

    (pspmacs/local-leader-keys
      "M-x" '(consult-mode-command :wk "mode command"))
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))
    (autoload 'projectile-project-root "projectile")
    (add-to-list 'consult-buffer-filter "\\`\\*epc con [0-9]+\\*\\'")
    :custom
    (consult-narrow-key "<") ;; "C-+"
    (consult-project-root-function #'projectile-project-root))
#+end_src
** mhayashi1120/Emacs-wgrep
#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

* Systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

* unix password-manager
#+begin_src emacs-lisp
  (use-package pass)
#+end_src

* native Emacs settings
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (epg-pinentry-mode 'loopback)
    (package-gnupghome-dir (expand-file-name "packages/gnupg" local-emacs-dir))
    :config
    (epa-file-enable))
#+end_src

* Nginx mode
Some incompatibility of Nginx with Emacs-29
#+begin_src emacs-lisp :tangle no :eval no
  (use-package nginx-mode
    :mode ("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src

* Inherit from private and local
 #+begin_src emacs-lisp
   (pspmacs/load-inherit)
   ;;; pspmacs-os.el ends here
#+end_src

#+title: late/index
#+property: header-args :tangle t :mkdirp t :results no :eval never
#+OPTIONS: _:nil
#+auto_tangle: t

* Package management
** Header
#+begin_src emacs-lisp :tangle package-management.el
  ;;; late/package-management.el --- initiate package manager -*- lexical-binding: t; -*-

  ;; Copyright Â© 2023  Pradyumna Swanand Paranjape

  ;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
  ;; Keywords: help, languages

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU Lesser General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU Lesser General Public License for more details.

  ;; You should have received a copy of the GNU Lesser General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;; Commentary: Set packate manager system, Also, initiate latest org mode.:
  ;; Code:
#+end_src

** Package installation directory
We want packages to be cloned/downloaded locally.
#+begin_src emacs-lisp :tangle package-management.el
  (customize-set-variable
   'package-user-dir
   (expand-file-name "packages" local-emacs-dir))
#+end_src

** Package system
- Load the package-system (=straight.el= or =package.el=).
  This file is maintained separately.
#+begin_src emacs-lisp :tangle  package-management.el
  (load (expand-file-name "bootstrap-package.el" pspmacs/packaging-directory)
          nil 'nomessage)
  (pspmacs/package-bootstrap)
  (pspmacs/init-package-manager)
  (load (expand-file-name "bootstrap-use-package.el" pspmacs/packaging-directory)
          nil 'nomessage)
  (pspmacs/init-use-package)
#+end_src

** Initiate org mode with latest release
- Emacs is shipped with a built-in org-mode. However, we shall use the latest release.
  #+begin_src emacs-lisp :tangle package-management.el
    (use-package org
      :demand t)
  #+end_src

** Load-path
- Add the modules to the top of the load-path so any user custom-modules take overwrite privileges.
#+begin_src emacs-lisp :tangle package-management.el
  (dolist (init-dir pspmacs/worktrees nil)
    (let ((modular-modules (expand-file-name "modules/" init-dir)))
      (when (file-directory-p modular-modules)
        (setq load-path
              (append (let ((load-path (list))
                            (default-directory modular-modules))
                        (add-to-list 'load-path modular-modules)
                        ;;(normal-top-level-add-to-load-path '("."))
                        (normal-top-level-add-subdirs-to-load-path)
                        load-path)
                      load-path)))))
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle package-management.el
    (pspmacs/load-inherit)
#+end_src

* Definitions
** Header
#+begin_src emacs-lisp :tangle definitions.el
  ;;; late/definitions.el --- define values -*- lexical-binding: t; -*-
#+end_src

** PSPMACS version
*** Header
- This file does *NOT* inherit.
#+begin_src emacs-lisp :tangle version.el
  ;;; late/version.el --- package version -*- lexical-binding: t; -*-
 #+end_src

*** Define
- Maintain a pspmacs version variable and caller function.
  #+begin_src emacs-lisp :tangle version.el
    (defconst pspmacs/version
      "0.0.1"
      "PSPMACS version")

    (defun pspmacs/version ()
      "Version of pspmacs"
      (interactive)
      (message pspmacs/version))
  #+end_src

*** Derive
#+begin_src emacs-lisp :tangle definitions.el
  (load (expand-file-name "late/version.el" user-emacs-directory) nil 'nomessage)
#+end_src

** pspmacs-group
#+begin_src emacs-lisp :tangle definitions.el
  (defgroup pspmacs nil
    "PSPMacs Custom init configuration for Emacs"
    :version pspmacs/version)
#+end_src

** Org mode auto-load
- Expand faculties of [[file:../early/index.org::*Inherence][pspmacs/load-inherit]] to =org-babel-load-file=
 #+begin_src emacs-lisp :tangle definitions.el
   (defun pspmacs/load-suitable (fname &optional nag)
     "Load Emacs init file FNAME.

   Function defined in early/definitions.el is hereby redefined to enable
   `org-babel-load-file' method, now that the correct `org-mode' is loaded.

   If FNAME is found, load it and return.
   If org/el counterpart of FNAME is found, load it and return.
   To load,

   If extension `string='s 'org', use function `org-babel-load-file'.
   If extension `string='s 'el', use function `load'

   If nothing is found and if NAG is t, throw error. Default: return"
     (cond
      ((string= (file-name-extension fname) "org")
       (cond ((file-readable-p fname)
              (org-babel-load-file fname))
             ((file-readable-p (file-name-with-extension fname "el"))
              (load (file-name-with-extension fname "el") nil 'nomessage))))
      ((string= (file-name-extension fname) "el")
       (cond ((file-readable-p fname)
              (load fname nil 'nomessage))
             ((file-readable-p (file-name-with-extension fname "org"))
              (org-babel-load-file (file-name-with-extension fname "org")))))
      (nag (user-error (format "Neither %s.{el,org} found."
                               (file-name-sans-extension fname))))))
#+end_src

** Pspack
Pack of functions, variables, faces for pspmacs
#+begin_src emacs-lisp :tangle definitions.el
  (add-to-list 'load-path (expand-file-name "pspack" user-emacs-directory))
  (require 'pspmacs/xdg)
  (require 'pspack)
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle definitions.el
    (pspmacs/load-inherit)
#+end_src

* Init
** Header
#+begin_src emacs-lisp :tangle init.el
;;; late/init.el --- Late init file, loads modules -*- lexical-binding: t; -*-
#+end_src

** Custom file
- The file ~custom-file~ is used by the Customization UI to store value-setting forms in a customization file, rather than at the end of the =~/.emacs.d/init.el= file. It defaults to =~/.emacs.d/custom.el=. The file is loaded after =late/config.el= file. Any variable values set till that point (=late/config.el=) will be overridden with the values set with the Customization UI and saved in the custom file.
#+begin_src emacs-lisp :tangle init.el
  (customize-set-variable 'custom-file
    (expand-file-name "custom.el" local-emacs-dir))
#+end_src
** Reset gc-cons
- To hasten early-init, gc-cons was set to highest possible value in =early/definitions.el=
  - Let's reduce it back to 2MB.
#+begin_src emacs-lisp :tangle init.el
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

#+begin_note
gcmh, which is a package presumed to be better at handling gc shall be loaded in the module [[file:../modules/pspmacs-interface-enhancement.org]]
#+end_note

** [[file:../modules/index.org][Load Modules]]
#+begin_src emacs-lisp :tangle init.el
  (pspmacs/load-modules)
#+end_src
** Byte compile worktrees
#+begin_src emacs-lisp :tangle init.el
  (pspmacs/byte-compile-worktrees)
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle init.el
    (pspmacs/load-inherit)
#+end_src

* Config
- Allow for very late configurations.
** Headers
#+begin_src emacs-lisp :tangle config.el
;;; late/config.el --- Final configurations -*- lexical-binding: t; -*-
#+end_src

** Set theme
#+begin_src emacs-lisp :tangle config.el
  (load-theme 'modus-vivendi :no-confirm)
  ;; Somehow, the hook isn't getting evaluated automatically
  (eval modus-themes-after-load-theme-hook)
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle config.el
    (pspmacs/load-inherit)
#+end_src


#+title: late/index
#+property: header-args :tangle t :mkdirp t :results no :eval never
#+OPTIONS: _:nil
#+auto_tangle: t

* Definitions
** Header
#+begin_src emacs-lisp :tangle definitions.el
  ;;; late/definitions.el --- identifies platform -*- lexical-binding: t; -*-
#+end_src

** PSPMACS version
*** Header
#+begin_src emacs-lisp :tangle version.el
  ;;; late/version.el --- package version -*- lexical-binding: t; -*-
 #+end_src

*** Define
- Maintain a pspmacs version variable and caller function.
  #+begin_src emacs-lisp :tangle version.el
    (defconst pspmacs/version
      "0.0.1"
      "PSPMACS version")

    (defun pspmacs/version ()
      "Version of pspmacs"
      (interactive)
      (message pspmacs/version))
  #+end_src

*** Derive
#+begin_src emacs-lisp :tangle definitions.el
  (load (expand-file-name "late/version.el" user-emacs-directory) nil 'nomessage)
#+end_src

** pspmacs-group
#+begin_src emacs-lisp :tangle definitions.el
  (defgroup pspmacs nil
    "PSPMacs Custom init configuration for Emacs"
    :version pspmacs/version)
#+end_src

** Identify platform
- In future, the same configuration may be extended to Windows/MacOS, although, current target is GNU/Linux only.
#+begin_src emacs-lisp :tangle definitions.el
  (defconst ON-LINUX   (eq system-type 'gnu/linux))
  (defconst ON-MAC     (eq system-type 'darwin))
  (defconst ON-BSD     (or ON-MAC (eq system-type 'berkeley-unix)))
  (defconst ON-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
#+end_src

** Common functions
*** Inferior interpreter
#+begin_src emacs-lisp :tangle definitions.el
  (defun pspmacs/inferior-interpreter (executable)
    "Open an inferior interpreter in split window

  Open EXECUTABLE interpreter in an inferior windows."
    (interactive)
    (let ((interpreter-window (split-window-below)))
      (select-window interpreter-window)
      (call-interactively executable)))
#+end_src

*** Destroy buffer and window when user application exits
#+begin_src emacs-lisp :tangle definitions.el
  (defun pspmacs/destroy-buffer-and-window (&optional target-buffer)
    "Destroy window and buffer after some process is done

  If TARGET-BUFFER is supplied, it and its window is destroyed.
  Else, current buffer and window is destroyed.
  If window is the only window, it is spared"
    (let* ((used-buffer (or target-buffer (current-buffer)))
           (used-window (get-buffer-window used-buffer)))
      (when (not (one-window-p))
        (delete-window used-window))
      (kill-buffer used-buffer)))
#+end_src

*** Kill all other buffers
#+begin_src emacs-lisp :tangle definitions.el
(defun pspmacs/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

*** Extend list as in python
- Extend a list with elements from an iterable.
#+begin_src emacs-lisp :tangle definitions.el
  (defun pspmacs/extend-list (list-var elements)
    "Iterative form of ‘add-to-list’.

  Return value is the new value of LIST-VAR"
    (unless (consp elements)
      (error "ELEMENTS must be list"))
    (dolist (elem elements)
      (add-to-list list-var elem))
    (symbol-value list-var))
#+end_src

*** Prettify mode
#+begin_src emacs-lisp :tangle definitions.el
  (defun pspmacs/mode-prettify (sub-modes)
    "Apply pretiffy mode alist according to active-mode"
    (progn
      (setq
       prettify-symbols-alist
       (mapcan (lambda (x)
                 (list x `(,(upcase (car x)) . ,(cdr x))))
               (apply #'append
                      (mapcar
                       (lambda (y)
                         (cdr (assoc y pspmacs/pretty-alist)))
                       sub-modes))))
      (prettify-symbols-mode)))
#+end_src
** Common custom variables
*** Highlighted tags
#+begin_src emacs-lisp :tangle definitions.el
  (defcustom pspmacs/hl-tag-faces
    '(("FAIL"  .  "#ff3f3f")
      ("FIXME" .  "#ff6f3f")
      ("TEMP"  .  "#ff9f3f")
      ("HACK"  .  "#ffcf3f")
      ("TODO"  .  "#ffff3f")
      ("LAZY"  .  "#e7ff3f")
      ("WAIT"  .  "#cfff3f")
      ("NEXT"  .  "#9fff3f")
      ("ALGO"  .  "#6fff3f")
      ("PROG"  .  "#3fff3f")
      ("TEST"  .  "#3fe757")
      ("ACTS"  .  "#3fcf6f")
      ("SENT"  .  "#3f9f9f")
      ("OKAY"  .  "#3f6fcf")
      ("DONE"  .  "#3f3fff")
      ("NOTE"  .  "#ffcf6f")
      ("XXXX"  .  "#ff9f9f")
      ("DONT"  .  "#ff6fcf")
      ("CANT"  .  "#ff3fff"))
    "Highlight colors for TODO tags"
    :group 'pspmacs)
#+end_src

*** Prettify data
#+begin_src emacs-lisp :tangle definitions.el
  (defcustom pspmacs/pretty-alist
    '(("code" . (("\\n" . ?⏎)
                 ("\\t" . ?↹)
                 (">=" . ?≥)
                 ("<=" . ?≤)
                 ("!=" . ?≠)
                 ("==" . ?≅)))
      ("lisp" . (("lambda" . ?λ)))
      ("org" . (("#+setupfile" . ?🛒)
                ("#+author" . ?🖋)
                ("#+begin_src" . ?)
                ("#+end_src" . ?⏎)
                ("#+email" . ?✉)
                ("#+language" . ?🗣)
                ("#+options" . ?🔘)
                ("#+property" . ?⚙)
                ("#+results" . ?📜)
                ("#+startup" . ?)
                ("#+html_head" . ?)
                ("#+title" . ?§)
                ("tangle" . ?🔗)
                ("[x]" . ?✔)
                ("[ ]" . ?❌)
                ("[-]" . ?⏳)))
      ("python" . (("and" . ?∩)
                   ("or" . ?∪)
                   ("->" . ?⇒))))
    "pretty symbols"
    :group 'pspmacs)
#+end_src

** XDG
- Emacs must respect =XDG= system
#+begin_src emacs-lisp :tangle definitions.el
  (load (expand-file-name "late/xdg.el" user-emacs-directory) nil 'nomessage)
#+end_src

*** XDG File system conventions
**** Header
#+begin_src emacs-lisp :tangle xdg.el
  ;;; late/xdg.el --- Personal xdg-definitions file -*- lexical-binding: t; -*-
#+end_src
**** Quick environment look-up to assign XDG locations
#+begin_src emacs-lisp :tangle xdg.el
  (defun xdg/assign-base (xdg-var default-path)
    "Emacs's default xdg-specified locations.

  If xdg's variable is defined by system, use it, else return default
  If XDG-VAR is defined in the environment, use XDG-VAR/emacs,
  else use DEFAULT-PATH/emacs"
    (directory-file-name (expand-file-name "emacs" (or (getenv xdg-var)
                                                       default-path))))
#+end_src

**** XDG_CONFIG_HOME
- This is *THE CONFIG DIRECTORY*
#+begin_src emacs-lisp :tangle xdg.el
  (defcustom xdg/emacs-config-directory 'user-emacs-directory
    "Location of local machine-specific emacs-configuration files

  alias of USER_EMACS_DIRECTORY"
    :group 'pspmacs)
#+end_src

**** XDG_CACHE_HOME
#+begin_src emacs-lisp :tangle xdg.el
  ;; ${XDG_CACHE_HOME:-${HOME}/.cache}/emacs
  (defcustom xdg/emacs-cache-directory
    (xdg/assign-base "XDG_CACHE_HOME" "~/.cache/")
    "Location of runtime cache files for emacs

  ${XDG_CONFIG_HOME:-${HOME}/.cache}/emacs"
    :group 'pspmacs)
#+end_src

**** XDG_DATA_HOME
#+begin_src emacs-lisp :tangle xdg.el

  ;; ${XDG_DATA_HOME:-${HOME}/.local/share}/emacs
  (defcustom xdg/emacs-data-directory
    (xdg/assign-base "XDG_DATA_HOME" "~/.local/share")
    "Location of persistent data files for emacs

  ${XDG_DATA_HOME:-${HOME}/.local/share}/emacs"
    :group 'pspmacs)

#+end_src

**** XDG_STATE_HOME
#+begin_src emacs-lisp :tangle xdg.el
  ;; ${XDG_STATE_HOME:-${HOME}/.local/state}/emacs
  (defcustom xdg/emacs-state-directory
    (xdg/assign-base "XDG_state_HOME" "~/.local/state")

    "Location of volatile state files for emacs
  ${XDG_STATE_HOME:-${HOME}/.local/state}/emacs"
    :group 'pspmacs)
#+end_src

**** Ensure
- Ensure that all emacs-xdg directories exist
#+begin_src emacs-lisp :tangle xdg.el
  (dolist (xdg-base '(xdg/emacs-data-directory
                      xdg/emacs-cache-directory
                      xdg/emacs-state-directory))
    (make-directory (eval xdg-base) t))
#+end_src

**** All cached files should be saved in XDG_CACHE_HOME
#+begin_src emacs-lisp :tangle xdg.el
  (defun locate-user-emacs-file (new-name &optional old-name)
    "This function supersedes emacs-native function.

  Return an absolute per-user Emacs-specific file name.
  If NEW-NAME exists in `xdg/emacs-cache-directory', return it.
  Else if OLD-NAME is non-nil and ~/OLD-NAME exists, return ~/OLD-NAME.
  Else return NEW-NAME in `xdg/emacs-cache-directory', creating the
  directory if it does not exist."
    (convert-standard-filename
     (let* ((home (concat "~" (or init-file-user "")))
            (at-home (and old-name (expand-file-name old-name home)))
            (bestname (abbreviate-file-name
                       (expand-file-name new-name xdg/emacs-cache-directory))))
       (if (and at-home (not (file-readable-p bestname))
                (file-readable-p at-home))
           at-home
         ;; Make sure `xdg/emacs-cache-directory' exists,
         ;; unless we're in batch mode or dumping Emacs.
         (or noninteractive
             dump-mode
             (let (errtype)
               (if (file-directory-p xdg/emacs-cache-directory)
                   (or (file-accessible-directory-p xdg/emacs-cache-directory)
                       (setq errtype "access"))
                 (with-file-modes ?\700
                   (condition-case nil
                       (make-directory xdg/emacs-cache-directory t)
                     (error (setq errtype "create")))))
               (when (and errtype
                          xdg/emacs-cache-directory-warning
                          (not (get 'xdg/emacs-cache-directory-warning 'this-session)))
                 ;; Warn only once per Emacs session.
                 (put 'xdg/emacs-cache-directory-warning 'this-session t)
                 (display-warning 'initialization
                                  (format "\
  Unable to %s `xdg/emacs-cache-directory' (%s).
  Any data that would normally be written there may be lost!
  If you never want to see this message again,
  customize the variable `xdg/emacs-cache-directory-warning'."
                                          errtype xdg/emacs-cache-directory)))))
         bestname))))
#+end_src

*** Inherit
#+begin_src emacs-lisp :tangle xdg.el
    (pspmacs/load-inherit)
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle definitions.el
    (pspmacs/load-inherit)
#+end_src

* Init
** Header
#+begin_src emacs-lisp :tangle init.el
;;; late/init.el --- Late init file, loads modules -*- lexical-binding: t; -*-
#+end_src

** Chemacs correction
[[https://github.com/plexus/chemacs2][Chemacs]] moves the =package-user-dir= to the profile's definition of the =user-emacs-directory= then loads this file. We need to reset that configuration here when using =chemacs=.
#+begin_src emacs-lisp :tangle init.el
  (when (featurep 'chemacs)
    (customize-set-variable 'package-user-dir
                            (expand-file-name "elpa" local-emacs-directory)))
#+end_src

** Package system
- Load the package-system (=straight.el=). This file is maintained separately.
#+begin_src emacs-lisp :tangle init.el
(load (expand-file-name "bootstrap-package.el" pspmacs/packaging-directory)
      nil 'nomessage)
#+end_src

** Load-path
- Add the modules to the top of the load-path so any user custom-modules take overwrite privileges.
#+begin_src emacs-lisp :tangle init.el
  (dolist (init-dir pspmacs/worktrees nil)
    (let ((modular-modules (expand-file-name "modules/" init-dir)))
      (when (file-directory-p modular-modules)
        (setq load-path
              (append (let ((load-path (list))
                            (default-directory modular-modules))
                        (add-to-list 'load-path modular-modules)
                        ;;(normal-top-level-add-to-load-path '("."))
                        (normal-top-level-add-subdirs-to-load-path)
                        load-path)
                      load-path)))))
#+end_src

** Custom file
- The file ~custom-file~ is used by the Customization UI to store value-setting forms in a customization file, rather than at the end of the =~/.emacs.d/init.el= file. It defaults to =~/.emacs.d/custom.el=. The file is loaded after =late/config.el= file. Any variable values set till that point (=late/config.el=) will be overridden with the values set with the Customization UI and saved in the custom file.
#+begin_src emacs-lisp :tangle init.el
  (customize-set-variable 'custom-file
    (expand-file-name "custom.el" local-emacs-directory))
#+end_src
** Reset gc-cons
- To hasten early-init, gc-cons was set to highest possible value in =early/definitions.el=
  - Let's reduce it back to 2MB.
#+begin_src emacs-lisp :tangle init.el
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

#+begin_note
gcmh, which is a package presumed to be better at handling gc shall be loaded in the module [[file:../modules/pspmacs-interface-enhancement.org]]
#+end_note

** Initiate org mode with latest release
- Emacs is shipped with a built-in org-mode. However, we shall use the latest release.
  #+begin_src emacs-lisp :tangle org-latest.el
    ;;;; org-latest.el --- org-mode -*- lexical-binding: t; -*-

    ;; Copyright (C) 2023  Pradyumna Swanand Paranjape

    ;; Author: Pradyumna Swanand Paranjape <pradyparanjpe@rediffmail.com>
    ;; Keywords: help, languages

    ;; This program is free software; you can redistribute it and/or modify
    ;; it under the terms of the GNU Lesser General Public License as published by
    ;; the Free Software Foundation, either version 3 of the License, or
    ;; (at your option) any later version.

    ;; This program is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ;; GNU Lesser General Public License for more details.

    ;; You should have received a copy of the GNU Lesser General Public License
    ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

    ;;; Commentary:

    ;;; Code:


    (use-package org
      ;; :straight (:type built-in)
      :ensure t)
  #+end_src

** Order of pspmacs modules to load
#+begin_src emacs-lisp :tangle init.el
    (use-package yaml)
    (use-package ht)
    (use-package f)

    (defcustom pspmacs/modules-order
      (let
          ((modules-dir
            (mapcar
             (lambda (x) (expand-file-name "modules" x)) pspmacs/worktrees)))
        (apply
         'vconcat (mapcar
                   (lambda (x) (cdr x))
                   (sort
                    (ht->alist
                    (apply
                     'ht-merge
                     (remq 'nil
                           (mapcar
                            (lambda (x)
                              (let
                                  ((order-file
                                    (expand-file-name "load-order.yml" x)))
                                (if (file-readable-p order-file)
                                    (yaml-parse-string
                                     (f-read-text order-file)))))
                            modules-dir))))
                   (lambda (a b) (< (car a) (car b)))))))
      "Ordered list of pspmacs/modules to load"
      :group 'pspmacs)
#+end_src


*** Org mode auto-load
- Expand faculties of [[file:../early/index.org::*Inherence][pspmacs/load-inherit]] to =org-babel-load-file=
 #+begin_src emacs-lisp :tangle org-latest.el
   (defun pspmacs/load-suitable (fname &optional nag)
     "Load emacs init file FNAME.

   If FNAME is found, load it and return.
   If org/el counterpart of FNAME is found, load it and return.
   To load,

   If extension `string='s 'org', use function `org-babel-load-file'.
   If extension `string='s 'el', use function `load'

   If nothing is found and if NAG is `t', throw error. Default: return"
     (cond
      ((string= (file-name-extension fname) "org")
       (cond ((file-readable-p fname)
              (org-babel-load-file fname))
             ((file-readable-p (file-name-with-extension fname "el"))
              (load (file-name-with-extension fname "el") nil 'nomessage))))
      ((string= (file-name-extension fname) "el")
       (cond ((file-readable-p fname)
              (load fname nil 'nomessage))
             ((file-readable-p (file-name-with-extension fname "org"))
              (org-babel-load-file (file-name-with-extension fname "el")))))
      (nag (user-error (format "Neither %s.{el,org} found."
                               (file-name-sans-extension fname))))))

   (defun pspmacs/load-inherit (&optional fname)
     "Inherit all equivalent files.

   Re-definition of early-loaded function after the correct orgmode is loaded.
   Files may be placed in `pvt-emacs-directory' and/or `local-emacs-directory'.
   If FNAME is supplied, *that* corresponding file name is attempted, else,
   stem of `load-file-name' is attempted.
   Init files are loaded using the function `pspmacs/load-suitable'.
   Settings loaded from files located in `pvt-emacs-directory' are overwritten
   by settings loaded from files located in `local-emacs-directory'."
     (let ((name-branch
        (file-relative-name (or fname load-file-name) user-emacs-directory)))
       (dolist (config-dir pspmacs/user-worktrees nil)
     (let* ((modular-init (expand-file-name name-branch config-dir)))
       (if (file-exists-p modular-init)
           (pspmacs/load-suitable modular-init))))))
#+end_src

*** Inherit
#+begin_src emacs-lisp :tangle org-latest.el
    (pspmacs/load-inherit)
#+end_src

- Load contents of the above file
  #+begin_src emacs-lisp :tangle init.el
    (load (expand-file-name "late/org-latest.el" user-emacs-directory))
  #+end_src

** [[file:../modules/index.org][Load Modules]]
#+begin_src emacs-lisp :tangle init.el
  (seq-doseq (autofile pspmacs/modules-order nil)
    (dolist (work-tree pspmacs/worktrees nil)
      (catch 'load-success
        (let* ((lit-module
                (expand-file-name
                 (format "modules/pspmacs-%s.org" autofile) work-tree))
               (found (when (file-readable-p lit-module)
                        (pspmacs/load-suitable lit-module)
                        lit-module)))
          (when found (throw 'load-success lit-module))))))
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle init.el
    (pspmacs/load-inherit)
#+end_src

* Config
- Allow for very late configurations.
  - User-defined configurations defined in =local-emacs-directory=
    will even override ~custom.el~
** Headers
#+begin_src emacs-lisp :tangle config.el
;;; late/config.el --- Personal configuration file -*- lexical-binding: t; -*-
#+end_src

** Disable evil-ret
- Because it is practically useless
#+begin_src emacs-lisp :tangle config.el
  (general-define-key :keymaps 'evil-motion-state-map "RET" nil)
#+end_src
** Custom file
- The custom file will only be loaded if `pspmacs/load-custom-file' is set to a non-nil value in the user's `config.el'.
#+begin_src emacs-lisp :tangle config.el
  (when pspmacs/load-custom-file
    (load custom-file t))
#+end_src

** Default directory
- Finally, set default directory to home
#+begin_src emacs-lisp :tangle config.el
(setq default-directory "~/")
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle config.el
    (pspmacs/load-inherit)
#+end_src

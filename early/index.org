#+title: early/index
#+property: header-args :tangle t :mkdirp t :results no :eval never
#+OPTIONS: _:nil
#+auto_tangle: t

* Prune
- Define early variables, functions, etc.
  - This file does not inherit private/local prune.el
** Headers
#+begin_src emacs-lisp :tangle prune.el
  ;;; early/prune.el --- Prune overloads -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

** Grabage Collection
- Increase the GC threshold for faster startup. The default is 800 kilobytes.
#+begin_src emacs-lisp :tangle prune.el
  (customize-set-variable 'gc-cons-threshold most-positive-fixnum)
  (customize-set-variable 'gc-cons-percentage 0.6)
#+end_src

** package management
- We may decide to use =straight.el=. For that to work, Emacs's internal ~package~ shouldn't load early.
#+begin_src emacs-lisp :tangle prune.el
  (customize-set-variable 'package-enable-at-startup nil)
  (customize-set-variable 'package-quickstart nil)
#+end_src

** Unnecessary features.
#+begin_src emacs-lisp :tangle prune.el
  (customize-set-variable 'inhibit-splash-screen t)
  (customize-set-variable 'use-file-dialog nil)
  (customize-set-variable 'tab-bar-new-button-show nil)
  (customize-set-variable 'tab-bar-close-button-show nil)
  (customize-set-variable 'tab-line-close-button-show nil)
  (customize-set-variable 'native-comp-async-report-warnings-errors nil)
  (customize-set-variable 'byte-compile-warnings
                          '(not free-vars unresolved noruntime lexical make-local))
#+end_src

** UI configuration
- Remove some unnecessary UI elements temporarily
#+begin_src emacs-lisp :tangle prune.el
  (dolist
      (prune-mode
       '(menu-bar-mode
         tool-bar-mode
         scroll-bar-mode
         blink-cursor-mode)
       nil)
    (if (fboundp prune-mode) (funcall prune-mode -1)))
#+end_src

** Source compilation
- Prefer loading newest compiled =.el= file
#+begin_src emacs-lisp :tangle prune.el
  (customize-set-variable 'load-prefer-newer t)
#+end_src

* Definitions
** Headers
#+begin_src emacs-lisp :tangle definitions.el
  ;;; early/definitions.el --- Prune overloads -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

** Inheritance / superceding order
- Get values from environment variables.
*** Private, version controlled
If envrionment variables are not set, ignore
#+begin_src emacs-lisp :tangle definitions.el
  (defvar pvt-emacs-dir
    (condition-case err
        (file-name-as-directory
         (if (getenv "PVT_EMACS_HOME")
             (file-name-as-directory (getenv "PVT_EMACS_HOME"))))
      ((error)
       (progn
         (if (string= (format "%s" err)
                      "(wrong-type-argument stringp nil)")
             nil
           (throw 'uncaught err)))))
    "Private version controlled

  privately synchronized configuration directory")
#+end_src

*** Local, machine-specific
If environment variables are not set, use:
- ~<pvt-emacs-dir>/local.d~ or
- ~<user-emacs-directory>/local.d~
  #+begin_src emacs-lisp :tangle definitions.el
    (defvar local-emacs-dir
      (file-name-as-directory
       (if (getenv "LOCAL_EMACS_HOME")
           (file-name-as-directory (getenv "LOCAL_EMACS_HOME"))
         (if pvt-emacs-dir
             (expand-file-name "local.d" pvt-emacs-dir)
           (expand-file-name "local.d" user-emacs-directory))))
      "Local, machine-specific, un-synchronized configuration directory")
  #+end_src

*** Inheritance list
#+begin_src emacs-lisp :tangle definitions.el
  (defvar pspmacs/user-worktrees
    (if pvt-emacs-dir
        `(,pvt-emacs-dir ,local-emacs-dir)
      `(,local-emacs-dir))
    "user's worktrees to load")

  (defvar pspmacs/worktrees
    (if pvt-emacs-dir
        `(,user-emacs-directory ,pvt-emacs-dir ,local-emacs-dir)
      `(,user-emacs-directory ,local-emacs-dir))
    "worktrees to load")
#+end_src

** Custom file
- The custom file is found in the =local-emacs-dir=. It contains
 customizations of variables and faces that are made by the user through the
 Customization UI, as well as any customizations made by packages.")
#+begin_src emacs-lisp :tangle definitions.el
  (defvar pspmacs/load-custom-file t
    "When non-nil, load `custom.el' after `<user-emacs-config>/late/config.el'")
#+end_src

** Inherence
- Temporarily, while org-mode is not yet loaded, this function is used for inheritance.
  - Later, this function is overwritten by a [[file:../late/index.org::*Org mode auto-load][generalized version]] that also loads org-mode files.
#+begin_src emacs-lisp :tangle definitions.el
  (defun pspmacs/load-suitable (fname &optional nag)
    "Load emacs init file FNAME.

  If FNAME is found, load it and return.
  If not found and if NAG is `t', throw error. Default: return.

  This function is overwritten in late/definitions.el after the correct
  org mode is loaded to include org-babel-load-file method"
    (if (file-readable-p fname)
        (load fname nil 'nomessage)
      (if nag (user-error (format "%s not found." fname)))))

  (defun pspmacs/load-inherit (&optional fname)
    "Inherit all equivalent files.

  Files may be placed in `pvt-emacs-dir' and/or `local-emacs-dir'.
  Settings loaded from files located in `pvt-emacs-dir' are overwritten
  by settings loaded from files located in `local-emacs-dir'.
  If FNAME is supplied, *that* corresponding file name is attempted, else,
  stem of `load-file-name' is attempted.

  Init files are loaded using the function `pspmacs/load-suitable'."
    (let ((name-branch
           (file-relative-name
            (or fname load-file-name) user-emacs-directory)))
      (dolist (config-dir pspmacs/user-worktrees nil)
        (let ((modular-init (expand-file-name
                             name-branch config-dir)))
          (condition-case err
              (pspmacs/load-suitable modular-init)
            (t (message
                "Error while loading %s: %s" modular-init err)))))))
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle definitions.el
  (pspmacs/load-inherit)
#+end_src

* Init
Initialize configurations
** headers
#+begin_src emacs-lisp :tangle init.el
  ;;; early/init.el --- early init -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

** Load Path
- Ensure the ={local,pvt}-emacs-directory= is on the load path.
#+begin_src emacs-lisp :tangle init.el
  (if (and pvt-emacs-dir (file-exists-p pvt-emacs-dir))
      (add-to-list 'load-path pvt-emacs-dir))
  (add-to-list 'load-path local-emacs-dir)
#+end_src

** Temporary blue theme
- If anything till [[file:../modules/pspmacs-theme.org]] fails
#+begin_src emacs-lisp :tangle init.el
  (load-theme 'deeper-blue t)
#+end_src

** Ensure a =local-emacs-dir=
- Make if absent
#+begin_src emacs-lisp :tangle init.el
  (unless (file-exists-p local-emacs-dir) (mkdir local-emacs-dir t))
#+end_src

** Native compilation settings
#+begin_src emacs-lisp :tangle init.el
  (when (featurep 'native-compile)
    ;; Silence compiler warnings as they can be pretty disruptive
    (customize-set-variable 'native-comp-async-report-warnings-errors nil)

    ;; Make native compilation happen asynchronously
    (customize-set-variable 'native-comp-deferred-compilation t)

    ;; Set the right directory to store the native compilation cache
    ;; NOTE the method for setting the eln-cache directory
    ;; depends on the emacs version
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name "var/eln-cache/" local-emacs-dir))))
    (add-to-list 'native-comp-eln-load-path
                 (expand-file-name "eln-cache/" local-emacs-dir)))
#+end_src

** Package management
- User may overwrite the =pspmacs/packaging-directory= in private or local init-tree to customize packaging system and decide how packages are to be initiated.
- These values are set in the =early-init=, but take effect as the /first step/ of =init.el=.
#+begin_src emacs-lisp :tangle init.el
  (setq pspmacs/packaging-directory
        (expand-file-name "packaging" user-emacs-directory))
#+end_src

** Single key-press response to yes-or-no
#+begin_src emacs-lisp :tangle init.el
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle init.el
  (pspmacs/load-inherit)
#+end_src

* Config
** Headers
#+begin_src emacs-lisp :tangle config.el
;;; early/config.el --- Early config for speedy launch -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

** Inherit
#+begin_src emacs-lisp :tangle config.el
  (pspmacs/load-inherit)
#+end_src
